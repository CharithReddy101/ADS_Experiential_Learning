{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.4"},"colab":{"name":"ADS Experiential Learning 2","provenance":[],"toc_visible":true}},"cells":[{"cell_type":"markdown","metadata":{"id":"5K-WTzmFpHoj"},"source":["## ADS Experiential Learning 2\n","I thought of using my own dataset of Aerostat IMU data but I was unable to get reliable data to test. So I continued working on the dataset of careercon competition which has IMU data of a robot on different types of floors like concrete, wood etc.\n","\n","\n","[ADS Experiential Learning 1 link](https://www.kaggle.com/charithreddy1o1/ads-experiential-learning)\n","\n","As I already preprocessed the data and implemented random forest algorithm in Exp1, I tried to implement kNN to study the features.\n"]},{"cell_type":"code","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","id":"sC_iPwsQpHol","executionInfo":{"status":"ok","timestamp":1604319124807,"user_tz":-330,"elapsed":1129,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}}},"source":["#imported required libraries\n","import numpy as np\n","import pandas as pd\n","import math\n","import multiprocessing\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import StratifiedKFold\n","import functools\n","from concurrent.futures import ProcessPoolExecutor\n","from sklearn.model_selection import KFold"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"L7aSZERHpHoq","executionInfo":{"status":"ok","timestamp":1604319127401,"user_tz":-330,"elapsed":3705,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}}},"source":["#loading data\n","test = pd.read_csv('/content/career-con-2019/X_test.csv')\n","train = pd.read_csv('/content/career-con-2019/X_train.csv')\n","target = pd.read_csv('/content/career-con-2019/y_train.csv')\n","submit = pd.read_csv('/content/career-con-2019/sample_submission.csv')"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","id":"C7RzZSGvpHox","executionInfo":{"status":"ok","timestamp":1604319127403,"user_tz":-330,"elapsed":3693,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}}},"source":["''' we are getting euler angles from imu data which has three axes (x,y,z).\n","But there is a problem with this. It gets a gimbal lock when the pitch of the robot is +-90. \n","So to avoid this, we are converting euler angles to quaternion which has four vectors say (x,y,z,w)'''\n","def quaternion_to_euler(x, y, z, w):\n","\n","    t0 = +2.0 * (w * x + y * z)\n","    t1 = +1.0 - 2.0 * (x * x + y * y)\n","    X = math.atan2(t0, t1)\n","\n","    t2 = +2.0 * (w * y - z * x)\n","    t2 = +1.0 if t2 > +1.0 else t2\n","    t2 = -1.0 if t2 < -1.0 else t2\n","    Y = math.asin(t2)\n","\n","    t3 = +2.0 * (w * z + x * y)\n","    t4 = +1.0 - 2.0 * (y * y + z * z)\n","    Z = math.atan2(t3, t4)\n","\n","    return X, Y, Z\n","    \n","def feature_engineering(df):\n","    \n","    df_new = pd.DataFrame()\n","    \n","    # calculate euclidean distance\n","    df['total_angular_velocity'] = np.sqrt(df['angular_velocity_X'] ** 2 + df['angular_velocity_Y'] ** 2 + df['angular_velocity_Z'] ** 2)\n","    df['total_linear_acceleration'] = np.sqrt(df['linear_acceleration_X'] ** 2 + df['linear_acceleration_Y'] ** 2 + df['linear_acceleration_Z'] ** 2)\n","    df['total_orientation'] = np.sqrt(df['orientation_X'] ** 2 + df['orientation_Y'] ** 2 + df['orientation_Z'] ** 2 + df['orientation_W'] ** 2)\n","\n","    # calculate absolute value \n","    df['linear_acceleration_X_abs'] = df['linear_acceleration_X'].where(df['linear_acceleration_X']>=0, - df['linear_acceleration_X'])\n","    df['linear_acceleration_Y_abs'] = df['linear_acceleration_Y'].where(df['linear_acceleration_Y']>=0, - df['linear_acceleration_Y'])\n","    df['linear_acceleration_Z_abs'] = df['linear_acceleration_Z'].where(df['linear_acceleration_Z']>=0, - df['linear_acceleration_Z'])\n","    \n","    # how much Robot have acceleration compared to velocity                                           \n","    df['acc_vs_vel'] = df['total_linear_acceleration'] / df['total_angular_velocity']\n","    \n","    x, y, z, w = df['orientation_X'].tolist(), df['orientation_Y'].tolist(), df['orientation_Z'].tolist(), df['orientation_W'].tolist()\n","    nx, ny, nz = [], [], []\n","    \n","    for i in range(len(x)):\n","        \n","        xx, yy, zz = quaternion_to_euler(x[i], y[i], z[i], w[i])\n","        nx.append(xx)\n","        ny.append(yy)\n","        nz.append(zz)\n","    \n","    df['euler_x'] = nx\n","    df['euler_y'] = ny\n","    df['euler_z'] = nz\n","    \n","    df['total_angle'] = np.sqrt(df['euler_x'] ** 2 + df['euler_y'] ** 2 + df['euler_z'] ** 2)\n","    df['angle_vs_acc'] = df['total_angle'] / df['total_linear_acceleration']\n","    df['angle_vs_vel'] = df['total_angle'] / df['total_angular_velocity']\n","    \n","    # add interaction feature\n","    df['acc_times_vel'] = df['total_linear_acceleration'] * df['total_angular_velocity']\n","    df['angle_times_acc'] = df['total_angle'] * df['total_linear_acceleration']\n","    df['angle_times_vel'] = df['total_angle'] * df['total_angular_velocity']\n","    df['angle_times_vel_times_acc'] = df['total_angle'] * df['total_angular_velocity'] * df['total_linear_acceleration']\n","\n","    def f1(x):\n","        return np.mean(np.diff(np.abs(np.diff(x))))\n","    \n","    def f2(x):\n","        return np.mean(np.abs(np.diff(x)))\n","    \n","    for col in df.columns:\n","        \n","        if col in ['row_id', 'series_id', 'measurement_number']:\n","            continue\n","        \n","        df_new[col + '_mean'] = df.groupby(['series_id'])[col].mean()\n","        df_new[col + '_min'] = df.groupby(['series_id'])[col].min()\n","        df_new[col + '_max'] = df.groupby(['series_id'])[col].max()\n","        df_new[col + '_std'] = df.groupby(['series_id'])[col].std()\n","        df_new[col + '_max_to_min'] = df_new[col + '_max'] / df_new[col + '_min']\n","\n","        df_new[col + '_mean_abs_change'] = df.groupby('series_id')[col].apply(f2)\n","        df_new[col + '_mean_change_of_abs_change'] = df.groupby('series_id')[col].apply(f1)\n","        \n","        df_new[col + '_abs_max'] = df.groupby('series_id')[col].apply(lambda x: np.max(np.abs(x)))\n","        df_new[col + '_abs_min'] = df.groupby('series_id')[col].apply(lambda x: np.min(np.abs(x)))\n","\n","\n","    return df_new"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"YPTPR05RpHo2","executionInfo":{"status":"ok","timestamp":1604319223074,"user_tz":-330,"elapsed":99358,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}}},"source":["#pooling data with the extracted features\n","with multiprocessing.Pool() as pool: \n","    train, test = pool.map(feature_engineering, [train, test])   "],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qz18HkaKpHo6","executionInfo":{"status":"ok","timestamp":1604319223077,"user_tz":-330,"elapsed":99354,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}}},"source":["train = train.reset_index()\n","test = test.reset_index()"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"JgAvbZP0pHpC","executionInfo":{"status":"ok","timestamp":1604319223078,"user_tz":-330,"elapsed":99349,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}}},"source":["le = LabelEncoder()\n","target['surface'] = le.fit_transform(target['surface'])"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"JNFJa6ZPpHpH","executionInfo":{"status":"ok","timestamp":1604319223079,"user_tz":-330,"elapsed":99344,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}}},"source":["#implementing knn\n","def _distance(a, b):\n","    distance = np.linalg.norm(a - b)\n","    \n","    return distance\n","\n","def _knn_distance(xtr_c, target, k):\n","    distances = np.array([_distance(target, x) for x in xtr_c])\n","    sorted_distances = np.sort(distances)\n","    nearest_distances = sorted_distances[:k]\n","    sum_distances = np.sum(nearest_distances)\n","\n","    return sum_distances\n","\n","def _knn_distance_fold(xtr_c, k, folds, target):\n","    distances = np.empty([folds])\n","\n","    kf = KFold(shuffle=True, n_splits=folds)\n","    for i, (train_index, _) in enumerate(kf.split(xtr_c)):\n","        xtr_c_sampled = xtr_c[train_index]\n","        distance = _knn_distance(xtr_c_sampled, target, k)\n","        distances[i] = distance\n","\n","    average_distance = distances.mean()\n","\n","    return average_distance\n","\n","\n","def knn_extract(xtr, ytr, xte, k=1, folds=5, nprocesses=-1):\n","    if nprocesses == -1:\n","        nprocesses = multiprocessing.cpu_count()\n","\n","    classes = np.unique(ytr)\n","    features = np.zeros([len(xte), len(classes) * k])\n","\n","    for i, class_ in enumerate(classes):\n","       xtr_c = xtr[ytr == class_]\n","\n","       for j, k_n in enumerate(range(1, k + 1), 1):\n","            f = functools.partial(_knn_distance_fold, xtr_c, k_n, folds)\n","            with ProcessPoolExecutor(max_workers=nprocesses) as executor:\n","                feature = executor.map(f, xte)\n","                features[:, i * j] = list(feature)\n","\n","    return features"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"SBStdxPepHpO","executionInfo":{"status":"ok","timestamp":1604320282757,"user_tz":-330,"elapsed":1159016,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}}},"source":["#training data\n","train_array = train.values\n","test_array = test.values\n","knn_train = knn_extract(train_array, target['surface'].values, train_array)\n","knn_test = knn_extract(train_array, target['surface'].values, test_array)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"akDL2zbWpHpT","executionInfo":{"status":"ok","timestamp":1604320282766,"user_tz":-330,"elapsed":1159019,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}}},"source":["knn_train = pd.DataFrame(knn_train)\n","knn_test = pd.DataFrame(knn_test)\n","knn_train = pd.concat([train, knn_train], axis=1)\n","knn_test = pd.concat([test, knn_test], axis=1)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"xoDHQUAQpHpX","executionInfo":{"status":"ok","timestamp":1604320282768,"user_tz":-330,"elapsed":1159015,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}}},"source":["# replace NAN to 0\n","train.fillna(0, inplace=True)\n","test.fillna(0, inplace=True)\n","knn_train.fillna(0, inplace=True)\n","knn_test.fillna(0, inplace=True)\n","\n","# replace infinite value to zero\n","train.replace(-np.inf, 0, inplace=True)\n","train.replace(np.inf, 0, inplace=True)\n","test.replace(-np.inf, 0, inplace=True)\n","test.replace(np.inf, 0, inplace=True)\n","knn_train.replace(-np.inf, 0, inplace=True)\n","knn_train.replace(np.inf, 0, inplace=True)\n","knn_test.replace(-np.inf, 0, inplace=True)\n","knn_test.replace(np.inf, 0, inplace=True)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"M2YYB9yHpHpc","executionInfo":{"status":"ok","timestamp":1604320994290,"user_tz":-330,"elapsed":1870530,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}},"outputId":"35cb658a-2c23-43ce-9de4-01a6427a57e8","colab":{"base_uri":"https://localhost:8080/"}},"source":["#trainingdata with features and knn\n","folds = StratifiedKFold(n_splits=100, shuffle=True, random_state=546789)\n","sub_preds_rf = np.zeros((knn_test.shape[0], 9))\n","score = 0\n","counter = 0\n","\n","for train_index, test_index in folds.split(knn_train, target['surface']):\n","    \n","    clf_knn = RandomForestClassifier(n_estimators=200, n_jobs=-1)\n","    clf_knn.fit(knn_train.iloc[train_index], target['surface'][train_index])\n","    sub_preds_rf += clf_knn.predict_proba(knn_test) / folds.n_splits\n","    score += clf_knn.score(knn_train.iloc[test_index], target['surface'][test_index])\n","    counter += 1\n","\n","print('avg accuracy : {}'.format(score / folds.n_splits))"],"execution_count":13,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:667: UserWarning: The least populated class in y has only 21 members, which is less than n_splits=100.\n","  % (min_groups, self.n_splits)), UserWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["avg accuracy : 0.9695614035087714\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RXjmjH7KpHph","executionInfo":{"status":"ok","timestamp":1604320994294,"user_tz":-330,"elapsed":1870529,"user":{"displayName":"Charith Reddy","photoUrl":"","userId":"14467066403985280068"}},"outputId":"6898167c-6f01-4ab4-ddc1-f3c7838d933f","colab":{"base_uri":"https://localhost:8080/"}},"source":["#extracting feature importartance after training data\n","fti_knn = clf_knn.feature_importances_\n","\n","for i, feat in enumerate(knn_train.columns):\n","    print('{0} : {1:>.6f}'.format(feat, fti_knn[i]))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["series_id : 0.015510\n","orientation_X_mean : 0.015558\n","orientation_X_min : 0.012954\n","orientation_X_max : 0.012986\n","orientation_X_std : 0.001413\n","orientation_X_max_to_min : 0.006035\n","orientation_X_mean_abs_change : 0.002438\n","orientation_X_mean_change_of_abs_change : 0.000588\n","orientation_X_abs_max : 0.005967\n","orientation_X_abs_min : 0.007466\n","orientation_Y_mean : 0.007134\n","orientation_Y_min : 0.007914\n","orientation_Y_max : 0.006945\n","orientation_Y_std : 0.002026\n","orientation_Y_max_to_min : 0.003657\n","orientation_Y_mean_abs_change : 0.002107\n","orientation_Y_mean_change_of_abs_change : 0.000427\n","orientation_Y_abs_max : 0.007618\n","orientation_Y_abs_min : 0.006354\n","orientation_Z_mean : 0.009888\n","orientation_Z_min : 0.009145\n","orientation_Z_max : 0.010289\n","orientation_Z_std : 0.001394\n","orientation_Z_max_to_min : 0.003670\n","orientation_Z_mean_abs_change : 0.001986\n","orientation_Z_mean_change_of_abs_change : 0.000575\n","orientation_Z_abs_max : 0.007021\n","orientation_Z_abs_min : 0.009008\n","orientation_W_mean : 0.011162\n","orientation_W_min : 0.010418\n","orientation_W_max : 0.012252\n","orientation_W_std : 0.001170\n","orientation_W_max_to_min : 0.005465\n","orientation_W_mean_abs_change : 0.001348\n","orientation_W_mean_change_of_abs_change : 0.000587\n","orientation_W_abs_max : 0.006709\n","orientation_W_abs_min : 0.007105\n","angular_velocity_X_mean : 0.001248\n","angular_velocity_X_min : 0.001676\n","angular_velocity_X_max : 0.001137\n","angular_velocity_X_std : 0.001918\n","angular_velocity_X_max_to_min : 0.001149\n","angular_velocity_X_mean_abs_change : 0.002600\n","angular_velocity_X_mean_change_of_abs_change : 0.000522\n","angular_velocity_X_abs_max : 0.002878\n","angular_velocity_X_abs_min : 0.000671\n","angular_velocity_Y_mean : 0.003780\n","angular_velocity_Y_min : 0.002504\n","angular_velocity_Y_max : 0.003460\n","angular_velocity_Y_std : 0.002103\n","angular_velocity_Y_max_to_min : 0.002863\n","angular_velocity_Y_mean_abs_change : 0.007737\n","angular_velocity_Y_mean_change_of_abs_change : 0.000510\n","angular_velocity_Y_abs_max : 0.001836\n","angular_velocity_Y_abs_min : 0.000871\n","angular_velocity_Z_mean : 0.002827\n","angular_velocity_Z_min : 0.003981\n","angular_velocity_Z_max : 0.002922\n","angular_velocity_Z_std : 0.001182\n","angular_velocity_Z_max_to_min : 0.001841\n","angular_velocity_Z_mean_abs_change : 0.002536\n","angular_velocity_Z_mean_change_of_abs_change : 0.000677\n","angular_velocity_Z_abs_max : 0.002087\n","angular_velocity_Z_abs_min : 0.001349\n","linear_acceleration_X_mean : 0.001364\n","linear_acceleration_X_min : 0.002422\n","linear_acceleration_X_max : 0.002922\n","linear_acceleration_X_std : 0.004599\n","linear_acceleration_X_max_to_min : 0.001127\n","linear_acceleration_X_mean_abs_change : 0.004155\n","linear_acceleration_X_mean_change_of_abs_change : 0.000645\n","linear_acceleration_X_abs_max : 0.004224\n","linear_acceleration_X_abs_min : 0.001194\n","linear_acceleration_Y_mean : 0.001398\n","linear_acceleration_Y_min : 0.003312\n","linear_acceleration_Y_max : 0.002788\n","linear_acceleration_Y_std : 0.003954\n","linear_acceleration_Y_max_to_min : 0.001153\n","linear_acceleration_Y_mean_abs_change : 0.007703\n","linear_acceleration_Y_mean_change_of_abs_change : 0.000557\n","linear_acceleration_Y_abs_max : 0.003726\n","linear_acceleration_Y_abs_min : 0.001659\n","linear_acceleration_Z_mean : 0.001372\n","linear_acceleration_Z_min : 0.002794\n","linear_acceleration_Z_max : 0.002356\n","linear_acceleration_Z_std : 0.005688\n","linear_acceleration_Z_max_to_min : 0.002928\n","linear_acceleration_Z_mean_abs_change : 0.006361\n","linear_acceleration_Z_mean_change_of_abs_change : 0.000625\n","linear_acceleration_Z_abs_max : 0.002057\n","linear_acceleration_Z_abs_min : 0.002044\n","total_angular_velocity_mean : 0.001939\n","total_angular_velocity_min : 0.001268\n","total_angular_velocity_max : 0.001727\n","total_angular_velocity_std : 0.001618\n","total_angular_velocity_max_to_min : 0.001093\n","total_angular_velocity_mean_abs_change : 0.003589\n","total_angular_velocity_mean_change_of_abs_change : 0.000521\n","total_angular_velocity_abs_max : 0.001164\n","total_angular_velocity_abs_min : 0.001159\n","total_linear_acceleration_mean : 0.004546\n","total_linear_acceleration_min : 0.001174\n","total_linear_acceleration_max : 0.003282\n","total_linear_acceleration_std : 0.005126\n","total_linear_acceleration_max_to_min : 0.001386\n","total_linear_acceleration_mean_abs_change : 0.006854\n","total_linear_acceleration_mean_change_of_abs_change : 0.000554\n","total_linear_acceleration_abs_max : 0.003239\n","total_linear_acceleration_abs_min : 0.001241\n","total_orientation_mean : 0.000169\n","total_orientation_min : 0.000474\n","total_orientation_max : 0.000414\n","total_orientation_std : 0.000098\n","total_orientation_max_to_min : 0.000679\n","total_orientation_mean_abs_change : 0.000200\n","total_orientation_mean_change_of_abs_change : 0.000002\n","total_orientation_abs_max : 0.000339\n","total_orientation_abs_min : 0.000461\n","linear_acceleration_X_abs_mean : 0.003721\n","linear_acceleration_X_abs_std : 0.004608\n","linear_acceleration_X_abs_max_to_min : 0.000978\n","linear_acceleration_X_abs_mean_abs_change : 0.005347\n","linear_acceleration_X_abs_mean_change_of_abs_change : 0.000626\n","linear_acceleration_X_abs_abs_max : 0.003270\n","linear_acceleration_X_abs_abs_min : 0.001094\n","linear_acceleration_Y_abs_mean : 0.002069\n","linear_acceleration_Y_abs_std : 0.002960\n","linear_acceleration_Y_abs_max_to_min : 0.001749\n","linear_acceleration_Y_abs_mean_abs_change : 0.009382\n","linear_acceleration_Y_abs_mean_change_of_abs_change : 0.000663\n","linear_acceleration_Y_abs_abs_max : 0.002504\n","linear_acceleration_Y_abs_abs_min : 0.001703\n","linear_acceleration_Z_abs_mean : 0.001020\n","linear_acceleration_Z_abs_std : 0.006500\n","linear_acceleration_Z_abs_max_to_min : 0.003469\n","linear_acceleration_Z_abs_mean_abs_change : 0.008877\n","linear_acceleration_Z_abs_mean_change_of_abs_change : 0.000593\n","linear_acceleration_Z_abs_abs_max : 0.003619\n","linear_acceleration_Z_abs_abs_min : 0.002681\n","acc_vs_vel_mean : 0.001510\n","acc_vs_vel_min : 0.001424\n","acc_vs_vel_max : 0.001243\n","acc_vs_vel_std : 0.001415\n","acc_vs_vel_max_to_min : 0.001181\n","acc_vs_vel_mean_abs_change : 0.001516\n","acc_vs_vel_mean_change_of_abs_change : 0.000617\n","acc_vs_vel_abs_max : 0.001353\n","acc_vs_vel_abs_min : 0.001470\n","euler_x_mean : 0.003414\n","euler_x_min : 0.003752\n","euler_x_max : 0.003724\n","euler_x_std : 0.002434\n","euler_x_max_to_min : 0.002504\n","euler_x_mean_abs_change : 0.002759\n","euler_x_mean_change_of_abs_change : 0.000791\n","euler_x_abs_max : 0.003722\n","euler_x_abs_min : 0.004016\n","euler_y_mean : 0.007834\n","euler_y_min : 0.008657\n","euler_y_max : 0.007307\n","euler_y_std : 0.001754\n","euler_y_max_to_min : 0.002321\n","euler_y_mean_abs_change : 0.004265\n","euler_y_mean_change_of_abs_change : 0.000446\n","euler_y_abs_max : 0.007918\n","euler_y_abs_min : 0.007841\n","euler_z_mean : 0.008515\n","euler_z_min : 0.008970\n","euler_z_max : 0.008608\n","euler_z_std : 0.001619\n","euler_z_max_to_min : 0.003877\n","euler_z_mean_abs_change : 0.001557\n","euler_z_mean_change_of_abs_change : 0.000737\n","euler_z_abs_max : 0.006936\n","euler_z_abs_min : 0.006616\n","total_angle_mean : 0.006281\n","total_angle_min : 0.005593\n","total_angle_max : 0.006714\n","total_angle_std : 0.001393\n","total_angle_max_to_min : 0.001587\n","total_angle_mean_abs_change : 0.002293\n","total_angle_mean_change_of_abs_change : 0.000662\n","total_angle_abs_max : 0.006317\n","total_angle_abs_min : 0.007553\n","angle_vs_acc_mean : 0.005018\n","angle_vs_acc_min : 0.002013\n","angle_vs_acc_max : 0.001273\n","angle_vs_acc_std : 0.003447\n","angle_vs_acc_max_to_min : 0.001445\n","angle_vs_acc_mean_abs_change : 0.005352\n","angle_vs_acc_mean_change_of_abs_change : 0.000708\n","angle_vs_acc_abs_max : 0.001010\n","angle_vs_acc_abs_min : 0.002128\n","angle_vs_vel_mean : 0.001501\n","angle_vs_vel_min : 0.001814\n","angle_vs_vel_max : 0.001064\n","angle_vs_vel_std : 0.001790\n","angle_vs_vel_max_to_min : 0.001036\n","angle_vs_vel_mean_abs_change : 0.002034\n","angle_vs_vel_mean_change_of_abs_change : 0.000594\n","angle_vs_vel_abs_max : 0.001271\n","angle_vs_vel_abs_min : 0.001803\n","acc_times_vel_mean : 0.001783\n","acc_times_vel_min : 0.001393\n","acc_times_vel_max : 0.001772\n","acc_times_vel_std : 0.003432\n","acc_times_vel_max_to_min : 0.001615\n","acc_times_vel_mean_abs_change : 0.008358\n","acc_times_vel_mean_change_of_abs_change : 0.000501\n","acc_times_vel_abs_max : 0.001386\n","acc_times_vel_abs_min : 0.001220\n","angle_times_acc_mean : 0.002581\n","angle_times_acc_min : 0.001198\n","angle_times_acc_max : 0.002228\n","angle_times_acc_std : 0.005177\n","angle_times_acc_max_to_min : 0.002209\n","angle_times_acc_mean_abs_change : 0.007435\n","angle_times_acc_mean_change_of_abs_change : 0.000561\n","angle_times_acc_abs_max : 0.002067\n","angle_times_acc_abs_min : 0.001202\n","angle_times_vel_mean : 0.001804\n","angle_times_vel_min : 0.001065\n","angle_times_vel_max : 0.001648\n","angle_times_vel_std : 0.001920\n","angle_times_vel_max_to_min : 0.001130\n","angle_times_vel_mean_abs_change : 0.003180\n","angle_times_vel_mean_change_of_abs_change : 0.000595\n","angle_times_vel_abs_max : 0.002296\n","angle_times_vel_abs_min : 0.000930\n","angle_times_vel_times_acc_mean : 0.001556\n","angle_times_vel_times_acc_min : 0.001140\n","angle_times_vel_times_acc_max : 0.001854\n","angle_times_vel_times_acc_std : 0.002511\n","angle_times_vel_times_acc_max_to_min : 0.001110\n","angle_times_vel_times_acc_mean_abs_change : 0.006408\n","angle_times_vel_times_acc_mean_change_of_abs_change : 0.000597\n","angle_times_vel_times_acc_abs_max : 0.001591\n","angle_times_vel_times_acc_abs_min : 0.000857\n","0 : 0.009949\n","1 : 0.043554\n","2 : 0.029494\n","3 : 0.003882\n","4 : 0.015106\n","5 : 0.042889\n","6 : 0.015008\n","7 : 0.034743\n","8 : 0.038718\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7-aDUrDHIt-s"},"source":["From the above results, we can say that orientation data is very important to predict the type of floor. We got similar results from the random forest method. \n","##Average Accuracy:\n","    ### Random Forest : 0.9125984251968505\n","    ### kNN : 0.9695614035087714\n","We got better results and accuracy from kNN over random forest.\n","##Why?\n","The results depend on few factors like number of examples in training set, dimensions of featured space, do we have correlated features,is overfitting a problem?.\n","\n","Points to be noted from our data:\n","\n","\n","*   IMU Data is noisy\n","*   We have strong correlation between few attributes and there is no meaningless data.\n","###Why kNN?\n","\n","\n","*   It is robust to noisy training data and is effective in case of large number of training examples.\n","*   Simple to implement\n","\n","*   Though kNN take more computatipn and time, few factors of our data might have given us better results. \n","*   We also had to do feature engineering to data before implementing kNN.\n","\n","##**Therefore, we can conclude from all the results that orientation data of a robot is important**\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"ixmUbxJKJSAJ"},"source":[""],"execution_count":null,"outputs":[]}]}